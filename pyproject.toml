[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "caidence"
dynamic = ["version"]
description = "Democratizing Clinical NLP through Agentic AI"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Sonish Sivarajkumar", email = "sonish@example.com"},
]
maintainers = [
    {name = "Sonish Sivarajkumar", email = "sonish@example.com"},
]
keywords = ["clinical", "nlp", "ai", "healthcare", "ctakes", "medical"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
requires-python = ">=3.8"
dependencies = [
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "spacy>=3.7.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.6.0",
    "cryptography>=41.0.0",
    "bcrypt>=4.1.0",
    "ollama>=0.1.0",
    "sentence-transformers>=2.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "pytest-asyncio>=0.21.0",
]
fhir = [
    "fhir.resources>=7.0.0",
]
viz = [
    "seaborn>=0.12.0",
    "matplotlib>=3.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/sonishsivarajkumar/cAIdence"
Documentation = "https://github.com/sonishsivarajkumar/cAIdence/docs"
Repository = "https://github.com/sonishsivarajkumar/cAIdence"
Issues = "https://github.com/sonishsivarajkumar/cAIdence/issues"
Changelog = "https://github.com/sonishsivarajkumar/cAIdence/blob/main/CHANGELOG.md"

[project.scripts]
caidence = "caidence.main:main"

[tool.setuptools]
packages = ["caidence"]

[tool.setuptools.dynamic]
version = {attr = "caidence.__version__"}

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "spacy.*",
    "transformers.*",
    "torch.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=caidence",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "ctakes: Tests requiring cTAKES",
]

[tool.coverage.run]
source = ["caidence"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
